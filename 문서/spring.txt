<클라이언트, 서버, 데이터베이스의 역할>
1. 클라이언트 
- GUI(Graphic User Interface)사용자 인터페이스를 제공하고, 사용자의 요청(Request)
	을 처리하여 서버로 전달함. 
- 서버에서 받은 응답(Response)을 사용자에게 보여줌
- 예) 웹브라우저, 모바일 앱

2. 서버
- 클라이언트로부터 요청을 받아 처리하고 필요한 데이터를 DB에서 조회하거나 로직(Logic)수행
- 처리된 결과를 클라이언트로 응답
- 예) 웹서버, API 서버

3. 데이터베이스
- 데이터를 저장하고 관리하며, 서버의 요청에 따라 데이터를 검색하거나 수정함
- 예) MySQL, Oracle, MongoDB

# 시나리오 예시 (로그인)
1) 클라이언트가 사용자에게 로그인화면 제공
2) 사용자가 로그인 정보를 입력
3) 클라이언트는 사용자정보를 암호화해서 서버로 전송
4) 서버는 클라이언트의 로그인요청을 받아서 Service모듈로 전달
5) Service모듈이 로그인 정보의 확인을 위해 데이터베이스에 관련 정보 요청
6) 양쪽 정보를 비교해서 성공하면 로그인 성공 응답을 클라이언트로 전송
7) 클라이언트는 로그인 성공을 사용자에게 알리고 접속화면으로 전환

<웹서버 프로젝트 개발 환경>
1. IDE : 인텔리이제이
2. 웹프레임워크 : 스프링부트3
3. 보안솔루션 : 스프링 시큐리티
4. 데이터베이스 : MySQL 8.4
5. ORM(Object-Relational Mapping) : 하이버네이트, JPA
6. 내장 WAS 사용 : 톰캣

<스프링과 스프링부트>
- 스프링 : Java기반의 웹프레임워크. 웹애플리케이션 개발에서 구성요소들의 관리를 돕는다.
- 스프링부트 : 스프링을 더 쉽게 사용할 수 있도록 만들어진 웹프레임워크
	자동설정을 통해 복잡한 스프링의 설정방식을 쉽게 할 수 있도록 함.
	내장서버(톰캣)을 제공하여 별도의 서버 설치없이도 빠르게 애플리케이션을 만들수 있음.
- 차이점: 스프링은 기능이 강력하나 설정이 복잡하고 개발난이도가 높음.
	스프링부트는 스프링의 기능을 단순화하여 빠르고 쉽게 개발할 수 있음.

<용어 정리>
1. IP와 Port
- 아이피 : 인터넷에서 컴퓨터관련 기기들이 서로를 식별하고 통신하기 위한 주소
- 포트 : 기기안에서 여러 서비스를 구분하기위한 번호
	예) 이메일서비스는 50번 포트, 카카오톡서비스는 51번 포트...

2. 라이브러리와 프레임워크
- 라이브러리 : 개발에 필요한 여러 유용한 클래스를 모아논 코드 모음
	예) java.sql.*, java.collection.list...
- 프레임워크 : 소프트웨어 개발을 수월하게 하기 위한 개발 환경(!)
	정해진 규칙과 틀안에서 개발을 수행하도록 정해논 환경.
	
3. 배포(Deployment)
- 개발된 애플리케이션이나 서비스를 사용 가능한 상태로 실제 환경에 릴리즈하는 과정
- 실제 또는 실제에 준하는 사용 환경에 설치하는 것

4. CI/CD
- CI(Continuous Integration) : 지속적 통합
	개발자들이 작성한 코드를 주기적으로 통합하고 자동으로 빌드 및 테스트하는 프로세스
- CD(Continuous Deployment) : 지속적인 배포
	CI가 성공적으로 완료된 후 자동으로 배포하는 프로세스
- 사용도구 : 깃허브, 젱킨스(Jenkins)

5. WS와 WAS
- WS (Web Server) : 기기 또는 시스템간 통신을 담당하며 데이터를 전달하는 역할
- WAS (Web Application Server) : 웹 애플리케이션을 실행하고 로직을 처리하는 서버.
	실제 비즈니스 로직을 처리할 수 있는 기능을 가지고 있음.
- 공통점 : 웹서비스의 요청과 응답을 처리
- 차이점 : WS가 통신시 데이터의 전달에 초점이 맞춰져있다면, WAS는 웹앱을 실행시켜 
	실제 비즈니스로직을 수행할 수 있는 기능 더 가지고 있는 것
- 유명한 WS : Nginx (엔진엑스)
- 유명한 WAS : Tomcat(톰캣), Jetty(제티)

6. Annotation(어노테이션) @
- 스프링부트에서 어노테이션은 매우 특별하고 많은 기능을 가짐.
- 개발자가 복잡한 설정을 직접 처리하지 않도록 도와줌
1) 애플리케이션 설정 및 초기화
2) 컴포넌트 등록 및 관리
   컴포넌트란, 자바 클래스를 말하는 용어
3) 의존성 주입 
   필요한 컴포넌트 객체를 자동으로 찾아서 참조할 수 있도록 도와주는 것
4) 웹 요청 처리
   웹 요청을 처리할 메서드나 컨트롤러를 지정함
5) 데이터베이스 작업
   데이터베이스와 관련된 클래스나 메서드를 쉽게 관리해줌
6) 실행 흐름 관리
   특정작업이 시작하거나 종료될때 필요한 로직을 실행시켜 줌
   
- 요약하면,
  클래스나 메서드위에 선언한 어노테이션의 종류에 따라서 "이건 이렇게 해줘"라는 개발자의
  요청을 스프링부트가 알아서 처리할 수 있게 도와주는 역할을 수행
  각 역할별로 다양한 어노테이션이 존재함
  
<스프링부트 프로젝트 기본 설명>
1. 웹페이지(start.spring.io)에서 설정하여 파일형태로 다운로드
- Project : Maven 
- Language : Java
- 버전 : 3.4.0
- Metadata : Group(com.dw), Artifact(프로젝트명) Packaging(jar), Java(21)
- 의존성 : Web, JPA, MySQL

2. 폴더별 설명
- src/main/java/com/dw/프로젝트명 : 코드영역. java파일들이 위치함
- src/main/resources/application.properties : 환경설정파일
- pom.xml : 의존성 정의, 빌드환경 세팅

3. application.properties
- 데이터베이스 연결 정보를 기록
spring.datasource.url=jdbc:mysql://localhost:3306/testdb
spring.datasource.username=root
spring.datasource.password=root
- 이외 각종 스프링관련 세팅을 설정하는 파일임

4. pom.xml
- Maven에서 사용되는 프로젝트 객체 모델 파일로서 프로젝트의 구성정보와 의존성을 정의
- 여러 프로젝트 정보를 정의하고 외부 라이브러리 의존성을 관리
- 빌드 설정을 정의










	
	
	
	
	
	
	
	
	
	